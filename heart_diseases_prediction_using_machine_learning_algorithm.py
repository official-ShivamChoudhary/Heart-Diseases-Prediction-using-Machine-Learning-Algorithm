# -*- coding: utf-8 -*-
"""Heart Diseases prediction using Machine Learning Algorithm

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10jPufONeqDB5LXQq7poM_BOP7ulV0svv
"""

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

pd.read_csv('/content/Heart_Disease_Prediction.csv')

data=pd.read_csv('/content/Heart_Disease_Prediction.csv')

data

data.info

data.isnull().sum()

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x=data['Heart Disease'],hue='Sex',data=data)

sns.countplot(x=data['Heart Disease'],hue='Chest pain type',data=data)

sns.countplot(x=data['Sex'],hue='Chest pain type',data=data)

sns.countplot(x=data['Sex'],hue='Chest pain type',data=data)

sns.barplot(x=data['Sex'],y=data['BP'],data=data)

sns.barplot(x=data['Sex'],y=data['Cholesterol'],data=data)

sns.barplot(x=data['Heart Disease'],y=data['Cholesterol'],data=data)

sns.barplot(x=data['Heart Disease'],y=data['BP'],data=data)

sns.barplot(x=data['Heart Disease'],y=data['Cholesterol'],data=data)

sns.barplot(x=data['Heart Disease'],y=data['BP'],data=data)

sns.lineplot(x=data['Age'],y=data['BP'],data=data)

sns.lineplot(x=data['Age'],y=data['BP'],data=data)

sns.lineplot(x=data['Age'],y=data['BP'],data=data)

sns.lineplot(x=data['Age'],y=data['Cholesterol'],data=data)

sns.lineplot(x=data['Age'],y=data['ST depression'],data=data)

sns.barplot(x=data['Sex'],y=data['ST depression'],data=data)

sns.barplot(x=data['Heart Disease'],y=data['Exercise angina'],data=data)

sns.barplot(x=data['Heart Disease'],y=data['Number of vessels fluro'],data=data)

sns.barplot(x=data['Heart Disease'],y=data['Thallium'],data=data)

sns.barplot(x=data['Sex'],y=data['FBS over 120'],data=data)

sns.heatmap(data.corr())

from sklearn.preprocessing import LabelEncoder,StandardScaler
le=LabelEncoder()
data['Heart Disease']=le.fit_transform(data['Heart Disease'])

y=data['Heart Disease']
x=data.drop(['Heart Disease'],axis=1)

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=0,test_size=0.2)

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
lr=LogisticRegression(max_iter=10000)
lr.fit(x_train,y_train)
pred_1=lr.predict(x_test)
score_1=accuracy_score(y_test,pred_1)

score_1

from sklearn.ensemble import RandomForestClassifier
rfc=RandomForestClassifier()
rfc.fit(x_train,y_train)
pred_2=rfc.predict(x_test)
score_2=accuracy_score(y_test,pred_2)

score_2

from xgboost import XGBClassifier
xgb=XGBClassifier()
xgb.fit(x_train,y_train)
pred_3=xgb.predict(x_test)
score_3=accuracy_score(y_test,pred_3)

score_3

from sklearn.neighbors import KNeighborsClassifier
list_1=[]
for i in range(1,21):
    knn=KNeighborsClassifier(n_neighbors=i)
    knn.fit(x_train,y_train)
    preds=knn.predict(x_test)
    scores=accuracy_score(y_test,preds)
    list_1.append(scores)

max(list_1)